name: Automate VM and Check the Disk Info

on:

 schedule:
    - cron: '0 14 * * *'
 branches: 
       - main

jobs:
  azure-login:
      name: Login to azure
      runs-on: self-hosted
      steps:
        - name: Checkout repo
          uses: actions/checkout@v4 

        - name: Login to Azure
          run: az login --use-device-code

        - name: Set Azure Subscription
          run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: Check the Azure Account
          run: az account show

        - name: Checking Resources in Resource Group
          run: |
           az resource list --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --output table
  
  checking-azure-vm:
      name: checking VM
      runs-on: self-hosted
      needs: [azure-login]
      steps:
        - name: Checking the VM
          run: |
           az vm show --name ${{ secrets.AZURE_VM_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "id" --output tsv && echo "VM exists" || echo "VM does not exist"

        - name: checking the Power-State of the VM
          run: |
           STATUS=$(az vm get-instance-view --name ${{ secrets.AZURE_VM_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query "instanceView.statuses[?starts_with(code, 'PowerState/')].code" -o tsv)
           if [[ "$STATUS" == "PowerState/deallocated" || "$STATUS" == "PowerState/stopped" ]]; then
             echo "Starting VM..."
             az vm start --name ${{ secrets.AZURE_VM_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}
           else
             echo "VM is already running."
           fi
        
        - name: Checking the Nginx in VM
          run: |
           az vm run-command invoke \
           --command-id RunShellScript \
           --name ${{ secrets.AZURE_VM_NAME }} \
           --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
           --scripts "sudo apt update -y && (dpkg -l | grep -qw nginx && echo 'Nginx is already installed' || (sudo apt install -y nginx && sudo systemctl enable nginx && sudo systemctl start nginx && echo 'Nginx installed'))"

        - name: Checking Disk-Space of VM
          run: |
           az vm run-command invoke \
            --command-id RunShellScript \
            --name ${{ secrets.AZURE_VM_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --scripts "df -h --output=source,size,used,avail,pcent,target | column -t" \
            --query "value[0].message" -o tsv > vm_disk_info.txt

        - name: Checking the Current Running Processes in the VM
          run: |
            az vm run-command invoke \
            --command-id RunShellScript \
            --name ${{ secrets.AZURE_VM_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --scripts "ps -eo pid,user,%cpu,%mem,command --sort=-%cpu | head -20 | column -t" \
            --query "value[0].message" -o tsv > vm_process_info.txt

        - name: Combining the Disk & Running Process Reports
          run: |
           REPORT_DATE=$(date +"%Y-%m-%d %H:%M:%S")
           echo "Azure VM Report - $REPORT_DATE" > vm_report.txt
           echo -e "\n### Disk Space Info ###\n" >> vm_report.txt
           cat vm_disk_info.txt >> vm_report.txt
           echo -e "\n### Running Processes ###\n" >> vm_report.txt
           cat vm_process_info.txt >> vm_report.txt
        
        - name: Send an email with VM report
          uses: dawidd6/action-send-mail@v4
          with:
           server_address: smtp.gmail.com
           server_port: 587
           username: ${{ secrets.EMAIL_USERNAME }}
           password: ${{ secrets.EMAIL_PASSWORD }}
           subject: "Azure VM System Report - $(date +"%Y-%m-%d")"
           body: "Please find the attached system report for $(date +"%Y-%m-%d %H:%M:%S")."
           to: "kkmachani@gmail.com"
           from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
           attachments: "vm_report.txt"

        
        - name: Stopping the VM
          run: |
           echo "Holding for 5 seconds before stopping the VM..."
           sleep 5
           az vm stop --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }} --no-wait

